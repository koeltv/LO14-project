#!/bin/bash

# Necessary files & directories
pcron_dir="/etc/pcron"
pcrontab_file="/etc/pcrontab"
log_file="/var/log/pcron"
allow_file="/etc/pcron.allow"
deny_file="/etc/pcron.deny"

log_message() {
	echo "$(date +'%Y-%m-%d %H:%M:%S') - $1" >> "$log_file"
}

# Check user permissions, we first check the deny list, then the allow list
check_permissions() {
	if [[ $USER != "root" ]] && (
	  ([ -f "$deny_file" ] && grep -q "^$USER$" "$deny_file") ||
  	([ -f "$allow_file" ] && ! grep -q "^$USER$" "$allow_file")
	); then
	  echo "L'utilisateur $USER n'a pas les permissions sur pcron"
	  exit 1
	fi
}

# Match time field with current time value
matches_time() {
	local field="$1"
	local current_value="$2"

	# Correspondance exacte
	if [[ "$field" == "$current_value" ]]; then return 0; fi

	# Étoile (*) : correspond à toutes les valeurs
	if [[ "$field" == "*" ]]; then return 0; fi

	# Pas (*/N) : toutes les N unités
	if [[ "$field" =~ ^\*/([0-9]+)$ ]]; then
		local step="${BASH_REMATCH[1]}"
		[[ "$((current_value % step))" -eq 0 ]] && return 0 || return 1
	fi

	# Liste de valeurs (X:Y:Z) : correspond si la valeur est dans la liste
	if [[ "$field" =~ ^([0-9]+(:[0-9]+)*)$ ]]; then
		IFS=":" read -ra values <<< "$field"
		for value in "${values[@]}"; do
			if [[ "$current_value" -eq "$value" ]]; then return 0; fi
		done
		return 1
	fi

	# Intervalle avec exclusions (A-B~X~Y) ou sans (A-B) : exclut certaines valeurs dans l'intervalle
	if [[ "$field" =~ ^([0-9]+)-([0-9]+)(~[0-9]+)*$ ]]; then
		local start="${BASH_REMATCH[1]}"
		local end="${BASH_REMATCH[2]}"

		local excluded_values=()
		# Extraction des exclusions
		if [[ "$field" =~ (~[0-9]+) ]]; then
			excluded_values=($(echo "$field" | egrep -o "~[0-9]+" | tr -d "~"))
		fi
		# Vérifie si dans l'intervalle, puis vérifie les exclusions
		if [[ "$current_value" -ge "$start" && "$current_value" -le "$end" ]]; then
			for excluded in "${excluded_values[@]}"; do
				if [[ "$current_value" -eq "$excluded" ]]; then return 1; fi
			done
			return 0
		fi
		return 1
	fi

	return 1  # Par défaut, pas de correspondance
}

check_and_run() {
  read current_sec current_min current_hour current_day current_mon current_weekd < <(date +"%-S %M %H %d %m %u")

  # Create a list of all runnable pcron files
  files=("$pcron_dir"/*)
  if [ -f "$pcrontab_file" ]; then
    files+=("$pcrontab_file")
  fi

  # Check tasks in /etc/pcron and /etc/pcrontab
  for file in "${files[@]}"; do
  	while read -r line; do
      # Parse line
      read -r sec min hour day mon weekd command <<< "$line"

  	  # Check if this command should run now
  	  if matches_time "$sec" "$((current_sec / 15))" &&
  			matches_time "$min" "$current_min" &&
  			matches_time "$hour" "$current_hour" &&
  			matches_time "$day" "$current_day" &&
  			matches_time "$mon" "$current_mon" &&
  			matches_time "$weekd" "$current_weekd";
  		then
  		  eval "$command" &
        log_message "Executed task from $file: $command"
  		fi
  	done < <(grep -v '^ *#' "$file")
  done
}

# Setup necessary directories & files, along with their permissions
if [ ! -d $pcron_dir ]; then
  mkdir -p $pcron_dir > /dev/null 2>&1 || { echo "Could not create $pcron_dir"; exit 1; }
  chmod a+w $pcron_dir > /dev/null 2>&1 || { echo "Could not modify permissions on $pcron_dir"; exit 1; }
fi

if [ ! -r $pcrontab_file ]; then
  touch $pcrontab_file > /dev/null 2>&1 || { echo "Could not create $pcrontab_file"; exit 1; }
fi
if [ ! -f $log_file ]; then
  touch $log_file > /dev/null 2>&1 || { echo "Could not create $log_file"; exit 1; }
fi
if [ ! -w $log_file ]; then
  chmod a+w $log_file > /dev/null 2>&1 || { echo "Could not modify permissions on $log_file"; exit 1; }
fi

# Main loop to check scheduled tasks
while true; do
  check_permissions

  check_and_run &

  # Wait until the next 15-second interval
  sleep $((15 - $(date +%S) % 15))
done
